var inst;const timeout=600;const largeConstant=new BigNumber("1000000000000000000000000");const players={};const rewards={};const contractInfo={invested:new BigNumber(0)};const transactions={};const errors={};const e=React.createElement;const ee=(tag,...children)=>React.createElement(tag,null,...children);function toETH(x){return web3.fromWei(x,"ether")}function toWei(x){return web3.toWei(x,"ether")}function interpolate(v,rgb1,rgb2){var rgb=[0,0,0];var p=v;p=Math.max(0,p);p=Math.min(1,p);for(var i=0;i<3;i++){rgb[i]=Math.floor(rgb1[i]*(1-p)+rgb2[i]*p)}return rgb}function color2(secondsAgo){var red=[255,60,60];var green=[60,255,60];var yellow=[255,255,0];var p=secondsAgo/timeout;p=Math.max(0,p);p=Math.min(1,p);var rgb;if(p<.5)rgb=interpolate(p*2,red,yellow);else rgb=interpolate((p-.5)*2,yellow,green);return"rgb("+rgb[0]+", "+rgb[1]+", "+rgb[2]+")"}var trid=0;var errorid=0;function appendErrorMessage(err){if(err){const thisid=errorid;errorid=errorid+1;errors[thisid]=err;setTimeout(function(){delete errors[thisid]},1e4)}}function reporting(desc,err,txid){if(txid)transactions[txid]={desc:desc};appendErrorMessage(err)}function idle(address){const desc="idle() from "+address;inst.idle.sendTransaction({from:address,gas:3e5},function(error,txid){reporting(desc,error,txid)})}function invest(address,amount){const desc="invest("+amount+") from "+address;inst.invest.sendTransaction({from:address,value:amount,gas:3e5},function(error,txid){reporting(desc,error,txid)})}function divest(address,amount){const desc="divest("+amount+") from "+address;inst.divest.sendTransaction(amount,{from:address,gas:3e5},function(error,txid){reporting(desc,error,txid)})}function poke(poker,pokee){const desc="poke("+pokee+") from "+poker;inst.poke.sendTransaction(pokee,{from:poker,gas:3e5},function(error,txid){reporting(desc,error,txid)})}function claimRewards(address){const desc="claimRewards() from "+address;inst.claimRewards.sendTransaction({from:address,gas:3e5},function(error,txid){reporting(desc,error,txid)})}function Poke(props){return e("button",{onClick:()=>poke(props.poker,props.pokee)},"Poke")}function ClaimRewards(props){if(props.owed>0)return e("div",null,ee("p","You can claim "+props.owed+" ETH  ",e("button",{onClick:()=>claimRewards(props.address)},"Claim")))}function InvestButton(props){return e("div",null,e("input",{id:"invest",defaultValue:0,style:{width:"200px"}}),e("button",{onClick:()=>invest(props.address,toWei(document.getElementById("invest").value))},"Invest (ETH)"))}function DivestButton(props){return e("div",null,e("input",{id:"divest",defaultValue:0,style:{width:"200px"}}),e("button",{onClick:()=>divest(props.address,toWei(document.getElementById("divest").value))},"Divest (ETH)"))}function IdleButton(props){return e("button",{onClick:()=>idle(props.address)},"Idle")}function PlayerInformation(props){const a=props.currentAddress;const p=props.currentPlayer;const owed=(props.cumulativeRatios-p.lastRewards)*p.balance/largeConstant;return e("div",{id:"currentPlayer"},"Enter your address: ",e("input",{id:"currentAddress",defaultValue:"0x0",type:"text",style:{width:300}}),e("p",null,"Balance: "+p.balance+" ETH"),InvestButton({address:a}),DivestButton({address:a}),IdleButton({address:a}),ClaimRewards({owed:owed,address:a}))}function OneError(props){return e("tr",{key:props.errid},ee("td",props.msg.toString()))}function ErrorReport(props){if(Object.keys(props.errors).length>0){return e("div",{id:"errors"},e("table",{style:{marginBottom:40}},ee("thead",ee("tr",ee("td","Error Messages"))),ee("tbody",Object.keys(props.errors).slice(-5).map(errid=>OneError({errid:errid,msg:props.errors[errid]})))))}else{return e("div",{id:"errors"})}}function Transaction(props){return e("tr",{key:props.txid},e("td",{style:{paddingRight:"10px",paddingLeft:"10px"}},props.txid),e("td",{style:{paddingRight:"10px",paddingLeft:"10px"}},props.desc))}function Transactions(props){if(Object.keys(props.transactions).length>0){return e("table",{style:{marginTop:40}},ee("thead",ee("tr",ee("td","Pending Transaction"),ee("td","Description"))),ee("tbody",Object.keys(props.transactions).map(tr=>Transaction({key:tr,txid:tr,desc:props.transactions[tr].desc}))))}else return}function Player(props){const now=(new Date).getTime()/1e3;const lp=props.lastPing?props.lastPing.toNumber():0;const timeLeft=lp+timeout-now;const pokeButton=timeLeft>=0?"in "+timeLeft.toFixed(0)+"s":Poke({poker:props.currentAddress,pokee:props.address});return e("tr",{key:props.address,style:{backgroundColor:color2(timeLeft)}},e("td",{style:{paddingRight:"10px",paddingLeft:"10px"}},props.address),e("td",{style:{paddingRight:"10px",paddingLeft:"10px"}},props.balance.toString(10)),e("td",{style:{paddingRight:"10px",paddingLeft:"10px"}},pokeButton))}function sum(l){if(l.length>0){var r=l[0];for(var i=1;i<l.length;i++){r=r.plus(l[i])}return r}else return 0}function Players(props){const addresses=Object.keys(props.players);const ps=props.players;const s=sum(addresses.map(address=>inst.getReward(address)));if(addresses.length>0)return e("div",{id:"players",style:{marginTop:"10px"}},ee("table",ee("thead",ee("tr",ee("td","Address"),ee("td","Balance (eth)"),ee("td","Poke"))),ee("tbody",addresses.map(address=>Player({currentAddress:props.currentAddress,address:address,balance:ps[address].balance,lastRewards:ps[address].lastRewards,lastPing:ps[address].lastPing})),e("tr",{style:{fontWeight:"bold"}},ee("td","Total"),ee("td",toETH(props.invested).toString(10)),ee("td")))))}function getPlayerData(i){inst.participants(i,function(error,address){appendErrorMessage(error);if(address&&!(address in players))players[address]={address:address};inst.lastPing(address,function(error,lp){appendErrorMessage(error);if(lp)players[address].lastPing=lp});inst.balanceOf(address,function(error,balance){appendErrorMessage(error);if(balance)players[address].balance=toETH(balance)});inst.lastRewards(address,function(error,lr){appendErrorMessage(error);if(lr)players[address].lastRewards=lr})})}function refreshTransactions(){Object.keys(transactions).forEach(function(txid){web3.eth.getTransaction(txid,function(error,tx){if(tx&&tx.blockNumber)delete transactions[txid]})})}function refresh(){const inputField=document.getElementById("currentAddress");const currentAddress=inputField!=null?inputField.value:"0x0";const defaultPlayer={balance:0};const currentPlayer=currentAddress in players?players[currentAddress]:defaultPlayer;refreshContractInfo();refreshPlayers();refreshTransactions();const gameComponent=Game({players:players,contractInfo:contractInfo,cumulativeRatios:contractInfo.cumulativeRatios,currentPlayer:currentPlayer,currentAddress:currentAddress,transactions:transactions,errors:errors});ReactDOM.render(gameComponent,document.getElementById("root"))}function Game(props){return e("div",null,ErrorReport({errors:props.errors}),PlayerInformation({cumulativeRatios:props.cumulativeRatios,currentPlayer:props.currentPlayer,currentAddress:props.currentAddress}),Players({invested:props.contractInfo.invested,cumulativeRatios:props.contractInfo.cumulativeRatios,currentAddress:props.currentAddress,players:props.players}),Transactions({transactions:props.transactions}))}function refreshContractInfo(){inst.invested(function(error,result){appendErrorMessage(error);if(result!=null)contractInfo["invested"]=result});inst.countParticipants(function(error,result){appendErrorMessage(error);if(result!=null)contractInfo["countParticipants"]=result.toString(10)});inst.cumulativeRatios(function(error,result){appendErrorMessage(error);if(result!=null)contractInfo["cumulativeRatios"]=result})}function refreshPlayers(){const n=contractInfo["countParticipants"];for(var i=0;i<n;i++){getPlayerData(i)}}function initialize(){var Web3=require("web3");if(typeof web3!=="undefined"){web3=new Web3(web3.currentProvider)}else{console.log("Connecting to local node.");web3=new Web3(new Web3.providers.HttpProvider("http://localhost:8545"))}inst=web3.eth.contract([{constant:true,inputs:[],name:"largeConstant",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:false,inputs:[],name:"idle",outputs:[],payable:false,type:"function"},{constant:true,inputs:[{name:"",type:"uint256"}],name:"participants",outputs:[{name:"",type:"address"}],payable:false,type:"function"},{constant:false,inputs:[],name:"claimRewards",outputs:[],payable:false,type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"lastPing",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:true,inputs:[],name:"countParticipants",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:true,inputs:[],name:"cumulativeRatios",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:false,inputs:[{name:"x",type:"uint256"}],name:"divest",outputs:[],payable:false,type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"lastRewards",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:false,inputs:[{name:"a",type:"address"}],name:"poke",outputs:[],payable:false,type:"function"},{constant:true,inputs:[{name:"a",type:"address"}],name:"getReward",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:true,inputs:[],name:"invested",outputs:[{name:"",type:"uint256"}],payable:false,type:"function"},{constant:false,inputs:[],name:"invest",outputs:[],payable:true,type:"function"},{inputs:[],payable:false,type:"constructor"}]).at("0x9a7e4083b7675376124884e91e63d1d36cbda8ba");setInterval(()=>refresh(),500)}